
1.

(SQL)

SELECT
  C.*
FROM
  courses AS C
  JOIN
  enrollments AS E
  ON
  E.course_id = C.id
  JOIN
  majors AS M
  ON
  C.major_id = M.id
  JOIN
  school AS S
  ON
  M.school_id = S.id
  JOIN
  users AS U
  ON
  E.user_id = U.id
WHERE
  S.name = "Engineering" AND U.id = 2

(ActiveRecord)

Course.where("id in (?)",
  (Enrollment.where("user_id = ?", 2).where("course_id in (?)",
      Course.where("major_id in (?)", User.college.schools.where("name = ?", "Engineering")[0].majors.pluck(:id)).pluck(:course_id))))

2.

^[0-9]{3}\-[0-9]{2}\-[0-9]{4}$

3.

const smallestPowerOf2 = (num) => {
  let currentPow = 1
  while(currentPow < num){
    currentPow *=2
  }
  return currentPow/2
}

4.

const clockHandAngle = (time) => {
  const hours = time.getHours();
  const minutes = time.getMinutes();

  const diff = Math.abs(minutesToAngle(minutes) - hoursToAngle(hours, minutes));

  return diff > 180 ? 360 - diff : diff;

}

const minutesToAngle = (minutes) => {
  return minutes * 6;
}

const hoursToAngle = (hours, minutes) => {
  return hours * 30 + (minutes/60 * 30);
}

5.

const findAlivest = (yearRanges) => {
  let freqs = {};
  let currentMax = 1;
  let mostLivedYears = [];
  yearRanges.forEach((yearRange) => {
    let years = enumerateRange(yearRange);
    years.forEach((year) => {
      freqs[year] = freqs[year] + 1 || 1;
      if(freqs[year] > currentMax){
        currentMax = freqs[year];
      }
    })
  })

  moveLivedYears = valueMatch(freqs, currentMax);

  return mostLivedYears;
}

const valueMatch = (obj, val) => {
  let arr = [];
  Object.keys(obj).forEach((key) => {
    if(obj[key] === val){
      returnArr.push(key);
    }
  })
  return arr;
}

const enumerateRange = (range) => {
  let arr = [];
  let current = range[0];
  while(current <= range[1]){
    arr.push(current);
    current += 1;
  }
  return arr;
}
